import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const fileToGenerativePart = (base64: string, mimeType: string) => {
  return {
    inlineData: {
      data: base64.split(',')[1],
      mimeType
    },
  };
};

interface GenerationOptions {
  mode: 'realistic' | 'artistic';
  selection: string;
  dressStyle: string;
}

export const generateCouplePicture = async (
  base64Image1: string,
  base64Image2: string,
  options: GenerationOptions
): Promise<{ imageData: string }> => {
  
  const model = 'gemini-2.5-flash-image';
  
  let prompt: string;
  const basePrompt = `It is crucial that you preserve their original facial features and likeness as accurately as possible from the two source images. The final image should be a high-quality portrait. Do not add any text or borders unless it's part of the requested style. The output must be only the image.`;

  let dressStyleInstruction = '';
  if (options.dressStyle && options.dressStyle !== 'Casual Wear') {
      dressStyleInstruction = `The couple should be dressed in "${options.dressStyle}" attire.`;
  }

  if (options.mode === 'realistic') {
    prompt = `Create a new, single, realistic photograph of the two people from the uploaded images as a couple. Place them in a natural setting: "${options.selection}". ${dressStyleInstruction} ${basePrompt}`;
  } else { // artistic
    prompt = `Create a new, single image of the two people from the uploaded images as a couple, rendered in an artistic style of "${options.selection}". ${dressStyleInstruction} ${basePrompt}`;
  }


  const imagePart1 = fileToGenerativePart(base64Image1, 'image/jpeg');
  const imagePart2 = fileToGenerativePart(base64Image2, 'image/jpeg');

  const response = await ai.models.generateContent({
    model: model,
    contents: {
      parts: [
        { text: prompt },
        imagePart1,
        imagePart2,
      ],
    },
    config: {
        responseModalities: [Modality.IMAGE],
    },
  });

  for (const part of response.candidates?.[0]?.content?.parts || []) {
    if (part.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      const imageUrl = `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      return { imageData: imageUrl };
    }
  }

  throw new Error("No image was generated by the API.");
};